// example IDL file

include "somefile.fbs";
native_include "native_type_test_impl.h";//native_includes must precede any declarations

namespace MyGame;

attribute "priority";

/* Adding a block comment should have no effect on parsing results */
enum Color : byte { Red = 1, Green, Blue }

/* If the lexer is too greedy it will swallow up all block comments into one big block.
   The parser/lexer should be able to handle real code between block comments */
union Any { Monster, Weapon, Pickup }

struct Vec3 {
  x:float;
  y:float;
  z:float;
}

table Monster {
  pos:Vec3;
  mana:short = 150;
  hp:short = 100;
  name:string;
  friendly:bool = false (deprecated, priority: 1);
  inventory:[ubyte];
  color:Color = Blue;
  test:Any;
}

table Empty {}

union UnionWithTrailingComma
{
    first,
    second,
}

union UnionWithAttributes (priority) {
    first, second
}

union UnionWithDiscriminants {
  Monster = 3,
  MyMonster: Monster = 5,
}

namespace Geometry;

attribute force_align;

struct Vector3D (native_type:"Native::Vector3D", force_align)
{
  // according to the flatbuffers parser implementation, native_inline and native_default are only relevant to a struct
  x:float (native_inline, native_default:10);
  y:float;
  z:float;
}

// arrays are a convenience short-hand for a fixed-length collection
struct Array3D
{
  pos:[float:3];
}

// Howerver, a custom allocator may be applied to a struct or a table, esp to allocate native struct types
table ApplicationData(native_custom_alloc:"custom_allocator") {
  vectors:[Vector3D];
}


root_type Monster;
